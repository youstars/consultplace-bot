from __future__ import annotations

import time
from typing import Optional

import httpx
import respx  # –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –≤ _patch_login_for_tests
from pydantic import BaseModel

from consultplace_bot.config import settings


# ------------------------------------------------------------------------------
# Pydantic-–º–æ–¥–µ–ª–∏
# ------------------------------------------------------------------------------
class _TokenPair(BaseModel):
    access: str
    refresh: str


# ------------------------------------------------------------------------------
# HTTP-–∫–ª–∏–µ–Ω—Ç —Å auto-refresh JWT
# ------------------------------------------------------------------------------
class _JWTAuth(httpx.Auth):
    """–î–æ–±–∞–≤–ª—è–µ—Ç Bearer-—Ç–æ–∫–µ–Ω –∏ –∞–≤—Ç–æ-refresh –ø—Ä–∏ 401."""

    requires_request_body = True

    def __init__(self, backend: "BackendClient"):
        self._backend = backend

    async def async_auth_flow(self, request):
        if self._backend.is_expired:
            await self._backend.refresh()

        request.headers["Authorization"] = f"Bearer {self._backend.access}"
        response = yield request

        if response.status_code == 401:
            await self._backend.login()
            request.headers["Authorization"] = f"Bearer {self._backend.access}"
            yield request


class BackendClient:
    """–ú–∏–Ω–∏-SDK –∫ CRM/Backend-API."""

    LOGIN_URL = "/auth/token/create/"
    REFRESH_URL = "/auth/token/refresh/"

    # --------------------------------------------------------------------- ctor
    def __init__(self) -> None:
        self._cli: Optional[httpx.AsyncClient] = None
        self._access: Optional[str] = None
        self._refresh: Optional[str] = None
        self._exp_ts: float = 0.0  # unix-–≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è access-—Ç–æ–∫–µ–Ω–∞

    # ----------------------------------------------------------- helpers / misc
    def _get_cli(self) -> httpx.AsyncClient:
        """–°–æ–∑–¥–∞—ë–º AsyncClient –ª–µ–Ω–∏–≤–æ ‚Äî —ç—Ç–æ —É–ø—Ä–æ—â–∞–µ—Ç –º–æ–∫–∏–Ω–≥ –≤ —Ç–µ—Å—Ç–∞—Ö."""
        if self._cli is None:
            self._cli = httpx.AsyncClient(
                base_url=settings.backend_base_url,
                auth=_JWTAuth(self),
                timeout=20.0,
            )
        return self._cli

    # ----------------------------------------------------------------- props
    @property
    def access(self) -> str:  # noqa: D401
        if self._access is None:
            raise ValueError("Access token is not set (call .login() first)")
        return self._access

    @property
    def is_expired(self) -> bool:
        return self._exp_ts == 0.0 or time.time() > self._exp_ts - 30

    # ----------------------------------------------------------- auth / tokens
    async def login(self) -> None:
        """–õ–æ–≥–∏–Ω–∏–º—Å—è –≤ CRM; access/refresh —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ self."""
        resp = await self._get_cli().post(
            self.LOGIN_URL,
            json={"username": settings.backend_user, "password": settings.backend_password},
            auth=None,  # –æ—Ç–∫–ª—é—á–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é _JWTAuth
        )
        resp.raise_for_status()
        self._set_tokens(_TokenPair.model_validate(resp.json()))

    async def refresh(self) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ–º access-—Ç–æ–∫–µ–Ω (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ-—Ö–µ–Ω–¥–ª–µ—Ä–æ–º _JWTAuth)."""
        resp = await self._get_cli().post(self.REFRESH_URL, json={"refresh": self._refresh}, auth=None)

        if resp.status_code == 401:  # refresh –ø—Ä–æ—Ç—É—Ö ‚Äî –ª–æ–≥–∏–Ω–∏–º—Å—è –∑–∞–Ω–æ–≤–æ
            await self.login()
            return

        resp.raise_for_status()
        self._set_tokens(_TokenPair.model_validate(resp.json()))

    # ----------------------------------------------------------------- helpers
    def _set_tokens(self, pair: _TokenPair) -> None:
        self._access = pair.access
        self._refresh = pair.refresh
        self._exp_ts = time.time() + 5 * 60  # access –∂–∏–≤—ë—Ç 5 –º–∏–Ω—É—Ç

    # -------------------------------------------------------------- API calls
    async def register_user(self, payload: dict) -> int:
        resp = await self._get_cli().post("/api/telegram/register/", json=payload)
        resp.raise_for_status()
        return resp.json()["user_id"]

    async def create_order(self, data: dict) -> int:
        resp = await self._get_cli().post("/orders/", json=data)
        resp.raise_for_status()
        return resp.json()["id"]

    async def request_tz(self, order_id: int, payload: dict) -> str:
        r = await self._get_cli().post(f"/v1/ai/orders/{order_id}/tz", json=payload)
        if r.status_code == 404:
            return "üöß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¢–ó –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (AI-—Å–µ—Ä–≤–∏—Å –µ—â—ë –Ω–µ –≤–∫–ª—é—á—ë–Ω)."
        r.raise_for_status()
        return r.json()["tz"]

    async def estimate_cost(self, order_id: int, tz: str) -> dict:
        r = await self._get_cli().post(f"/v1/orders/{order_id}/estimate", json={"tz": tz})
        r.raise_for_status()
        return r.json()

    async def match_specialists(self, order_id: int, top_n: int = 3) -> list[dict]:
        r = await self._get_cli().post(f"/v1/orders/{order_id}/match", json={"tz": "", "top_n": top_n})
        if r.status_code == 404:
            raise ValueError("AI-match service is not available")
        r.raise_for_status()
        return r.json().get("specialists", [])

    async def list_orders(self, *, mine: bool = True) -> list[dict]:
        r = await self._get_cli().get("/orders/")
        r.raise_for_status()
        return r.json()

    # ----------------------------------------------------------- context-mgr
    async def close(self) -> None:
        if self._cli is not None:
            await self._cli.aclose()
            self._cli = None

    async def __aenter__(self):
        return self

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        await self.close()


# ¬´singleton¬ª-—ç–∫–∑–µ–º–ø–ª—è—Ä, —á—Ç–æ–±—ã –≤–æ –≤—Å—ë–º –±–æ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–¥–∏–Ω –∫–ª–∏–µ–Ω—Ç
backend = BackendClient()

# ----------------------------------------------------------------------------------
#  TEST HELPERS
# ----------------------------------------------------------------------------------
@staticmethod
def _patch_login_for_tests() -> None:  # –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ tests/conftest.py
    """
    –ó–∞–º–µ–Ω—è–µ—Ç –º–µ—Ç–æ–¥ .login() –∑–∞–≥–ª—É—à–∫–æ–π: —Ç–æ–∫–µ–Ω—ã —Ñ–µ–π–∫–æ–≤—ã–µ, –∞ HTTP-–≤—ã–∑–æ–≤
    –∫ /auth/token/create/ –¥–µ–ª–∞–µ—Ç—Å—è *—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏* –æ–Ω –∑–∞–º–æ–∫–∞–Ω –≤ —Ç–µ—Å—Ç–µ.
    """
    async def _fake_login(self: "BackendClient") -> None:  # noqa: D401,WPS430
        # —Å—Ç–∞–≤–∏–º –≤–∞–ª–∏–¥–Ω—ã–µ ¬´—Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ¬ª —Ç–æ–∫–µ–Ω—ã
        self._access = "test_access"
        self._refresh = "test_refresh"
        self._exp_ts = time.time() + 3600

        # —Å–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç–∞, –µ—Å–ª–∏ –µ—â—ë –Ω–µ—Ç
        self._get_cli()

        # –ø—Ä–æ–±—É–µ–º –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ /auth/token/create/ ‚Äî –µ—Å–ª–∏ –º–∞—Ä—à—Ä—É—Ç
        # –∑–∞–º–æ–∫–∞–Ω (respx), —Ç–µ—Å—Ç —É–≤–∏–¥–∏—Ç –≤—ã–∑–æ–≤; –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –≥–ª–æ—Ç–∞–µ–º –æ—à–∏–±–∫—É.
        try:
            await self._get_cli().post(self.LOGIN_URL, json={}, auth=None)
        except respx.models.AllMockedAssertionError:  # –º–∞—Ä—à—Ä—É—Ç –Ω–µ –º–æ–∫–Ω—É—Ç
            pass

    # –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∞—Ç—Ä–∏–±—É—Ç—É –∫–ª–∞—Å—Å–∞
    BackendClient.login = _fake_login  # type: ignore[assignment]


# –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º helper –∫ –∫–ª–∞—Å—Å—É (—á—Ç–æ–±—ã –≤—ã–∑—ã–≤–∞–ª—Å—è –∫–∞–∫ BackendClient._patch‚Ä¶)
BackendClient._patch_login_for_tests = _patch_login_for_tests  # type: ignore[attr-defined]