from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from consultplace_bot.api.backend import backend

router = Router(name="match_ai")

def _short_card(sp: dict) -> str:
    return (f"üë§ <b>{sp['id']}</b>\n"
            f"–†–µ–π—Ç–∏–Ω–≥: {sp['overall_rating']:.2%}\n"
            f"–°—Ç–∞–≤–∫–∞: {sp['approx_hourly_rate']} ‚ÇΩ/—á\n")

@router.callback_query(F.data.startswith("order:match:start:"))
async def ai_match(cb: CallbackQuery):
    order_id = int(cb.data.rsplit(":", 1)[-1])

    specialists = await backend.match_specialists(order_id)
    if not specialists:
        await cb.message.answer("üöß –ü–æ–¥–±–æ—Ä —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        await cb.answer()
        return

    # –±–µ—Ä—ë–º top-3
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(f"üë§ {s['id']}", callback_data=f"order:match:choose:{order_id}:{s['id']}")]
            for s in specialists
        ]
    )
    cards = "\n\n".join(_short_card(s) for s in specialists)
    await cb.message.edit_text(f"<b>–ü–æ–¥—Ö–æ–¥—è—â–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã:</b>\n\n{cards}\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:",
                               reply_markup=kb)
    await cb.answer()

@router.callback_query(F.data.startswith("order:match:choose:"))
async def confirm_candidate(cb: CallbackQuery):
    parts = cb.data.split(":")
    order_id, sp_id = int(parts[-2]), int(parts[-1])
    await cb.message.edit_text(f"‚úÖ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç {sp_id} –ø—Ä–∏–≥–ª–∞—à—ë–Ω! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–∫–ª–∏–∫.")
    await cb.answer()