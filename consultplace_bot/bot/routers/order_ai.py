from aiogram import Router, F, types
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters.callback_data import CallbackData
from html import escape
from consultplace_bot.api.backend import backend

router = Router(name="order_ai")


@router.callback_query(F.data.startswith("order:tz:generate:"))
async def ai_generate_tz(cb: CallbackQuery):
    order_id = int(cb.data.rsplit(":", 1)[-1])

    tz = await backend.request_tz(order_id, payload={})   # –≤ MVP payload –ø—É—Å—Ç–æ–π
    if tz.startswith("üöß"):
        await cb.message.answer(tz)
        await cb.answer()
        return
    text = f"<b>–ß–µ—Ä–Ω–æ–≤–∏–∫ –¢–ó</b>\n\n{escape(tz)}\n\n–í—Å—ë –≤–µ—Ä–Ω–æ?"

    kb = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton("‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ", callback_data=f"order:tz:ok:{order_id}"),
        InlineKeyboardButton("‚úèÔ∏è –û–±—Å—É–¥–∏—Ç—å –ø–æ–∑–∂–µ", callback_data="noop")
    ]])
    await cb.message.edit_text(text, reply_markup=kb)
    await cb.answer()

class GenTZ(CallbackData, prefix="gen_tz"):
    id: int

@router.callback_query(GenTZ.filter())
async def generate_tz(cb: types.CallbackQuery, callback_data: GenTZ):
    await cb.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –¢–ó‚Ä¶", show_alert=False)

    # 1Ô∏è‚É£ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏ (–ø–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π dict c –∫–ª—é—á–æ–º "results")
    data = await backend.list_orders()
    if isinstance(data, dict) and "results" in data:
        orders = data["results"]
    elif isinstance(data, list):
        orders = data
    else:
        orders = []

    # 2Ô∏è‚É£ –Ω–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—É—é –∑–∞—è–≤–∫—É
    order = next((o for o in orders if o.get("id") == callback_data.id), None)
    if order is None:
        await cb.message.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –æ–±–Ω–æ–≤–∏—Ç–µ —Å–ø–∏—Å–æ–∫.")
        await cb.answer()
        return

    # 3Ô∏è‚É£ LLM-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¢–ó (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ —Å–≤–æ–π –º–µ—Ç–æ–¥ ai_generate_tz)
    tz_text = await backend.ai_generate_tz(order)

    # 4Ô∏è‚É£ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ –¢–ó –≤ CRM (–Ω–µ –ª–æ–º–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–∞–∂–µ –µ—Å–ª–∏ —É–ø–∞–¥—ë—Ç)
    try:
        await backend.request_tz(order["id"], {"tz": tz_text})
    except Exception:
        # –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º UX
        pass

    # 5Ô∏è‚É£ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¢–ó –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    from html import escape
    await cb.message.answer(
        f"‚úÖ –¢–ó –¥–ª—è –∑–∞–∫–∞–∑–∞ *#{order['id']}* –≥–æ—Ç–æ–≤–æ:\n\n{escape(tz_text)}",
        parse_mode="Markdown",
    )
    await cb.answer()

@router.callback_query(F.data.startswith("order:tz:ok:"))
async def ai_estimate(cb: CallbackQuery):
    order_id = int(cb.data.rsplit(":", 1)[-1])

    cost = await backend.estimate_cost(order_id, tz="approved")   # tz –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    text = (
        f"üí∞ <b>–û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏</b>\n"
        f"–î–∏–∞–ø–∞–∑–æ–Ω: {cost['min_price']:,}‚Äì{cost['max_price']:,} {cost['currency']}\n"
        f"–¢—Ä—É–¥–æ—ë–º–∫–æ—Å—Ç—å: {cost['effort_hours']} —á.\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –±—é–¥–∂–µ—Ç?"
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="noop"),
        InlineKeyboardButton("üîô –û–±—Å—É–¥–∏—Ç—å –ø–æ–∑–∂–µ", callback_data="noop")
    ]])
    await cb.message.edit_text(text, reply_markup=kb)
    await cb.answer()


@router.callback_query(lambda c: c.data and c.data.startswith("tz:"))
async def generate_tz_cb(query: CallbackQuery):
    # callback_data = "tz:<order_id>"
    _, order_id_str = query.data.split(":", maxsplit=1)
    try:
        order_id = int(order_id_str)
    except ValueError:
        await query.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–∫–∞–∑–∞", show_alert=True)
        return

    await query.answer("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –¢–ó‚Ä¶", show_alert=False)

    try:
        tz_text = await backend.request_tz(order_id, {})
    except Exception:
        await query.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¢–ó, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    reply = f"üìù –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}:\n\n{tz_text}"
    await query.message.answer(reply)